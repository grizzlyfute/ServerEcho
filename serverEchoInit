#!/bin/bash
### BEGIN INIT INFO
# Provides:          efbServerEcho
# Required-Start:    $network $local_fs
# Required-Stop:     $network $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: EFB RD GSM crypto server prod
### END INIT INFO

#
# Start/stops the GSM crypto servers
#

PROG="Server echo"
PROG_MSG="(prod)"
PROG_DIR="/opt/efbServerEcho"
LOGFILE="/var/log/efbServerEcho/serverEcho.log"
PROG_USER="efbTcpEchoUser"
PIDFILE="/var/run/efbServerEcho.pid"
PROC_NAME="efbServerEcho"

if [ `id -u` -ne 0 ]
then
  printf "Error: must be root to run this script\n" >&2
  exit 5
fi

case "$1" in
  start)
    if [ ! -f $PIDFILE ]
    then
      echo -n "Starting $PROG daemon:"

      echo -n " $PROG_MSG"
      devPort=`cat $PROG_DIR/port`
      echo "*** `date +"%Y-%m-%d %H:%M:%S"` - Starting Daemon ***" >> $LOGFILE
      start-stop-daemon --start --pidfile $PIDFILE \
        --name $PROC_NAME \
        --chuid $PROG_USER --chdir $PROG_DIR --nicelevel 5 --make-pidfile \
        --exec $PROG_DIR/$PROC_NAME -- $devPort >> $LOGFILE 2>&1 &

      echo "."
    else
      echo "$PROG daemon is already running ($PIDFILE exists). Aborting."
    fi
    ;;

  stop)
    if [ -f $PIDFILE ]
    then
      echo -n "Stopping $PROG daemons: "
      start-stop-daemon --stop --pidfile $PIDFILE
      # Wait a little and remove stale PID file
      sleep 1
      echo "*** `date +"%Y-%m-%d %H:%M:%S"` - Stopping Daemon ***" >> $LOGFILE
      if [ -f $PIDFILE ] && ! ps h `cat $PIDFILE` > /dev/null
      then
        rm -f $PIDFILE
      fi
      echo -n " $PROG_MSG"
      echo "."
    else
      echo "$PROG daemon is not running."
    fi
    ;;

  status)
    if [ -f $PIDFILE ]
    then
      echo "$PROC_NAME is running."
    else
      echo "$PROC_NAME is NOT running."
    fi
    ;;

  restart)
    $0 stop
    sleep 1
    $0 start
    ;;
  *)
    echo "Usage: /etc/init.d/`basename $0` {start|stop|status|restart}"
    exit 1
    ;;
esac

exit 0
